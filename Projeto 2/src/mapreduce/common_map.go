package mapreduce

import (
	"hash/fnv"
	"io/ioutil"
	"encoding/json"
	"os"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
			// qual tarefa do mapa esta é
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper) 
			//o número de tarefas reduzidas que serão executadas ("R" no papel)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//
	
	// doMap gerencia uma tarefa de mapa: ele deve ler um dos arquivos de entrada (inFile), chamar a função de mapa definida pelo
	//usuário (mapF) para o conteúdo desse arquivo e particionar a saída do mapF em arquivos intermediários nReduce.

	arquivo, err := os.Open(inFile)
	if err != nil {
		return
	}
	//defer arquivo.close()
	conteudo, err := ioutil.ReadAll(arquivo)
	if err != nil {
		return
	}
	// Existe um arquivo intermediário por tarefa de redução. O nome do arquivo inclui o número da tarefa do mapa e o número da tarefa
	//de redução. Use o nome do arquivo gerado por reduceName (jobName, mapTask, r) como o arquivo intermediário para reduzir a tarefa 
	//r. Chame ihash() (veja abaixo) em cada tecla, mod nReduce, para escolher r para um par chave / valor.

	// mapF () é a função de mapa fornecida pelo aplicativo. O primeiro argumento deve ser o nome do arquivo de entrada, embora afunção 
	//map normalmente o ignore. O segundo argumento deve ser todo o conteúdo do arquivo de entrada. mapF () retorna uma fatia contendo 
	//os pares chave / valor para reduzir; veja common.go para a definição de KeyValue.
	
	mapeamento := make(map[int][]KeyValue)
	chavesValores := mapF(inFile, string(conteudo))

	for _, chaveValor := range chavesValores {
		i := ihash(chaveValor.Key) % nReduce
		chaveValorAux, existe := mapeamento[i];
		if existe {
			novaChaveValor := append(chaveValorAux, chaveValor)
			mapeamento[i] = novaChaveValor
		} else {
			mapeamento[i] = []KeyValue{chaveValor}
		}
	}
	for chave,valores := range mapeamento {
		nomeAquivo := reduceName(jobName, mapTask, chave)
		novoAquivo, _ := os.Create(nomeAquivo)
		enc := json.NewEncoder(novoAquivo)
		for _, chaveValor := range valores {
			enc.Encode(&chaveValor)
		}
		novoAquivo.Close()
	}

}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
